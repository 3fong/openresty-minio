worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
	error_log logs/error.log debug;
    lua_package_path "/usr/local/openresty/nginx/lua-plugins/lua-resty-jwt-0.1.11/lib/?.lua;;";

    server {
		listen       80;
        server_name  localhost;
        default_type text/plain;
        location = /verify {
            content_by_lua '
                local cjson = require "cjson"
                local jwt = require "resty.jwt"
				local jwt_tenant_key = ngx.var.arg_key
				local jwt_token = ngx.var.arg_token
				
                local jwt_obj = jwt:verify(jwt_tenant_key, jwt_token)
                ngx.say(cjson.encode(jwt_obj.verified))
            ';
        }
        location = /sign {
			access_by_lua_block {
                local jwt = require "resty.jwt"
				local jwt_tenant_key = ngx.var.arg_key
				
                local jwt_token = jwt:sign("lua-resty-jwt",
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={foo="bar"}
                    }
                )
                ngx.say(jwt_token)
			}

        }
		location = /hashids {
			access_by_lua_block {
				local cjson = require "cjson"
				local hashids = require("hashids");
				local h = hashids.new("this is my salt")
				local valid = ngx.var.arg_valid
				local appid = ngx.var.arg_appid
				local timeinfo = os.time() + valid*60
				
				hash = h:encode(tonumber(appid,16),timeinfo)
                ngx.say(hash)
			}

        }
		location = /decode {
			access_by_lua_block {
				local cjson = require "cjson"
				local hashids = require("hashids");
				local id = ngx.var.arg_id
				local appid = ngx.var.arg_appid
				local h = hashids.new("this is my salt", 10);
				local myhashid = h:decode(id);
				ngx.log(ngx.INFO, "myhashid:", cjson.encode(myhashid))
				if #myhashid ==2 then
					local timeinfo = os.time()
					ngx.log(ngx.INFO,"当前时间: " ,timeinfo," 有效期: ", cjson.encode(myhashid[2]), " myhashid[1]: " ,cjson.encode(myhashid[1]))
					local diff  = timeinfo - myhashid[2] - 1*60
						ngx.log(ngx.ERR, "diff result:", diff)
					if diff > 0  then
						ngx.exit(ngx.HTTP_FORBIDDEN)
					end
					if tonumber(appid,16) == myhashid[1]  then
						ngx.say("success")
						return
					end
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end
			}

        }
    }
}