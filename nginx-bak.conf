worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    #resolver 127.0.0.11; # dns 配置
    gzip  on;
    real_ip_header     X-Forwarded-For;
    real_ip_recursive on;
	
    upstream minio {
        ip_hash;
        server 10.6.240.245:9090;
    }
    lua_package_path "/usr/local/openresty/nginx/lua-plugins/lua-resty-jwt-0.1.10/lib/?.lua;;";
	
    server {
        listen       80;
        server_name  localhost;
        real_ip_header    X-Forwarded-For;
        real_ip_recursive on;
        charset utf-8;
        location ~* ^/mdmresource {
			   proxy_set_header Host $http_host;
			   proxy_set_header X-Forwarded-For $remote_addr;
			   client_body_buffer_size 10M;
			   client_max_body_size 10G;
			   proxy_buffers 1024 4k;
			   default_type text/html;
			   access_by_lua_block {
				   -- 对于demo 的minio bucket 禁用列表列出
					local m, err = ngx.re.match(ngx.var.uri,[[^(\/mdmresource)(\d+)(\/?)$]])
					if m then
						 ngx.exit(ngx.HTTP_FORBIDDEN)
					end
			   }
			   index index.html index.htm index;
			   proxy_read_timeout 300;
			   proxy_next_upstream error timeout http_404;
			   proxy_pass http://minio;
		}
        location /alert {
         default_type text/html;
         content_by_lua_block{
             ngx.say([[<script>alert("error")</script>]])
         }
        }
        location = /verify {
			default_type text/plain;
            content_by_lua '
                local cjson = require "cjson"
                local jwt = require "resty.jwt"

                local jwt_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" ..
                    ".eyJmb28iOiJiYXIifQ" ..
                    ".VAoRL1IU0nOguxURF2ZcKR0SGKE1gCbqwyh8u2MLAyY"
                local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token)
                ngx.say(cjson.encode(jwt_obj))
            ';
        }
        location = /sign {
			default_type text/plain;
            content_by_lua '
                local cjson = require "cjson"
                local jwt = require "resty.jwt"

                local jwt_token = jwt:sign(
                    "lua-resty-jwt",
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={foo="bar"}
                    }
                )
                ngx.say(jwt_token)
            ';
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}